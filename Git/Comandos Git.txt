====================================================
	CONFIGS


git config --global user.name "nome" = para definir seu nome nos commits.

git config --global user.email "email" = para definir seu email dos commits.

git config 'configuração'= mostra o valor guardado da configuração que vc escolheu, ex: git config user.name = "joão"

git config --list = lista todas as configurações principais.

mkdir 'nome da pasta'  =  cria uma pasta chamada 'nome da pasta'.

cd 'nome da pasta' = abre a pasta.

cd .. = volta uma pasta.

git init  = inicia um repositorio git na pasta.

=====================================
	VI	


vi Readme.md  = Cria e abre ou so abre o arquivo Readme.md.

vai aparecer isso:

~
~
~
~
~
~
~
~

aperte i para poder entra no modo de inserir conteudo no arquivo, apos isso digite todo o conteudo que voce qeur colocar no arquivo Readme.md, apos concluir, aperte 'esc', vai sair do modo de inserir, apos isso, aperte ":wq" para salvar e sair do arquivo.

========================================

	ESTADOS DOS ARQUIVOS


untracked = em nenhuma versao do seu repositorio aquele arquivo existia.

unmodified = arquivo nao foi modificado desde a sua ultima versão no repositorio.

modified = arquivo foi modificado em comparação com a ultima versao do git.

staged = no momento em que a versao for fechada, o arquivo sera levado, e posteriormente voltara a ser unmodified.

git status =  para ver o estado do arquivo no repositorio.

git add 'arquivo' para ser preparado pro commit.

git commit -m "mensagem das suas modificações"= pegue todos os arquivos atuais do repositorio e crie uma nova versao.

============================================
	LOG


git log = pára saber umm relatorio dos commits, sabendo o nome, email, data e  mensagem do commit

git log --decorate = para mais informações, como brench, etc

git log --author="joao" = para listar os commits do autor joao

git shortlog = para listar de uma forma limpa os commits de cada autor e quantidade

git shortlog -sn = lista apenas com a quantidade de commits e cada autor

git log --graph = mostra um grafico mostrando o que que ta acontecendo com os brenchs e versões

================================
	CHECKOUT E RESET


git diff = mostra as alterações feitas

git diff --name-only = mostra apenas o nome dos arquivos modificados

git checkout Readme.md = o arquivo Readme.md tem que estar em estado de "modified" e se voce se arrepender e nao quer mais commitar, e sim, voltar atrás das alterações, use o git checkout Readme.md

git reset HEAD Readme.md = o arquivo Readme.md que esta em estado de "staged" ou seja, pronto pro commit, volta para unmodified

git reset --soft 'hash do commit anterior ao que voce quer apagar' = quando voce faz um commit errado os arquivos commitados volta para o estado de "staged" prontos para serem commitados de novo

git reset --mixed 'hash do commit anterior ao que voce quer apagar' = quando voce faz um commit errado os arquivos commitados volta para o estado de "modified" prontos para serem adicionados

git reset --hard 'hash do commit anterior ao que voce quer apagar' = quando voce faz um commit errado os arquivos commitados volta para o estado de "unmodified" resetando 



Git revert 'hash do commit que voce quer modificar' = ele pega as alterações que voce fez no commit selecionado e desfaz em um commit novo, mas sem apagar o commit antigo/com problema

=====================================
	REPOSITORIO


git remote add origin 'link do repositorio no github'

git remote -v = mostra a chave ssh do repositorio ou o link https

git push -u origin master = envia todas as informações do commit do master para o origin como padrao, ai nas proximas vezes voce so vai precisar de um simples : git push

git commit -am "mensagem" = para adicionar os arquivos e commitar na mesma hora, cuidado, faça antes um git status para ver se esta tudo certo mesmo.

git clone 'SSH-Repository-Key/HTTPS-Repository' 'pasta-do-repositorio-clonado'

======================================================

	BRANCH

o que é um branch? Branch é um ponteiro movel que leva a um commit

por que usar?	
-poder modificar sem alterar o local principal(master)
-facilmente desligavem
-multiplas pessoas trabalhando
-evita conflitos

como criar?

- git checkout -b 'nome do branch'

git branch = lista os branchs existentes, até o master

git checkout 'nome do branch' = ira entrar no branch selecionado

git branch -D 'nome do branch' = ira deletar o branch selecionado

========================================================
		UNINDO BRANCHES
		
	-MERGE
	-REBASE	
	

git merge 'nome do branch' = vai mesclar o branch 'nome do branch' com o branch master, Gerando com isso um novo commit

git rebase 'nome do branch' = vai mesclar o branch 'nome do branch' com o branch master, SEM GERAR um novo commit para isso

==========================================================
	.GITIGNORE E GIT STASH
	
.gitignore = um arquivo com esse nome em que dentro dele voce pode colocar nome de arquivos que voce nao quer passar em nenhum commit seu mas que precisam ficar na sua maquina.

git stash = usado quando voce esta fazendo modificando arquivos em um branch e precisa mudar algo em outro branch com maior prioridade, voce usa o git stah para guardar as alterações feitas no seu branch atual, evitando possiveis erros e perdas ,e colocando ele em estado de WIP = 'Work In Progress'

git stash aply = feito para aplicar as alterações guardadas no branch atual.

git stash list = lista todos os git stashs atuais

git stash clear = limpa todos os stashs

============================================================
	ATALHOS GIT
	
git config --global alias.s status = o comando status sera trocado pela letra 's' sendo necessario apenas um 'git s' para fazer um git status

============================================================
	GIT TAGS	
	
funciona como se fosse as 'versoes / releases' do aplicativo.
	
git tag -a 1.0.0 -m "Projeto finalizado"

git tags = lista todas as tags

git push origin master --tags = para subir as tags para o GitHub


============================================================
	DELETE  TAGS AND BRANCHS
	
git tag -d 1.0.0 = apaga a tag/release 1.0.0 localmente

git push origin:1.0.0 = apaga a release/tag 1.0.0 no repositorio remoto , no GitHub 	

git push origin:teste = deleta a branch teste do repositorio remoto, no GitHub